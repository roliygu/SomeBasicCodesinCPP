#include<iostream>
using namespace std;
const int Max=256;
class Triangle{
	private:
		int sum,len,half;
		int T[Max][Max];
	public:
		Triangle(int n);
		void Backtrack(int i,in count);
		void show();
};
Triangle::Triangle(int n){
	memset(T,0,sizeof(int)*Max*Max);
	len=n;
	int temp = (1+n)*n/2;
	if(temp%4!=0)
		cout<<"不能构成三角"<<endl;
	else
		sum=0;
	half=temp/4; 
}
void Triangle::Backtrack(int i,int count){
	if(count>half||(i*(i-1))/2-count>half)
		return;
	if(i>len)
		sum++;
	else{
		for(int i=0;i<2;i++){
			T[1][i]=i;
			int newcount = count+1;
			for(int j=2;j<=i;j++){
				T[j][i-j+1]=T[j-1][i-j+1]^T[j-1][i-j+2];
				newcount+=T[i][i-j+1];
			}
			Backtrack(i+1,newcount);
		}
	}
}
void Triangle::show(){
	cout<<"count :"<<sum<<endl;
}
int main(){
	Triangle A(7);
	A.Backtrack(1,0);
	A.show();
	return 0;
}
